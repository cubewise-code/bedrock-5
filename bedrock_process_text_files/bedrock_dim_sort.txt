#****Begin: Generated Statements***#****End: Generated Statements****#Region CallThisProcess# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.If( 1 = 0 );  ExecuteProcess('}bedrock.dim.sort',    'pCompSortType', 'ByName',    'pCompSortSense', 'Ascending',    'pElSortType', 'ByHierarchy',    'pElSortSense', 'Descending',    'pLogOutput', 0,    'pStrictErrorHandling', 0,    'pDim', '',    'pDelim', '&');EndIf;#EndRegion CallThisProcess #****Begin: Generated Statements***#****End: Generated Statements**** ################################################################################################# ##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~###################################################################################################   ### Global VariablesStringGlobalVariable('sProcessReturnCode');NumericGlobalVariable('nProcessReturnCode');nProcessReturnCode= 0; ### Constants ###cThisProcName     = GetProcessName();cTimeStamp        = TimSt( Now, '\Y\m\d\h\i\s' );cRandomInt        = NumberToString( INT( RAND( ) * 1000 ));cTempSubDim       = cThisProcName |'_dims_'| cTimeStamp |'_'| cRandomInt;cTempSubHier      = cThisProcName |'_hiers_'| cTimeStamp |'_'| cRandomInt;cUserName         = TM1User();cMsgErrorLevel    = 'ERROR';cMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';cMsgInfoContent   = 'User:%cUserName% Process:%cThisProcName% Message:%sMessage%';cLogInfo          = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pHier:%pHier%, pEle:%pEle%, pEleType:%pEleType%, pInsertionPoint:%pInsertionPoint%, pDelim:%pDelim%.';  ## LogOutput parametersIF( pLogoutput = 1 );    LogOutput('INFO', Expand( cLogInfo ) );   ENDIF; ### Validate Parameters ###nErrors = 0; # Validate dimensionIf( Trim( pDim ) @= '' );    nErrors = 1;    sMessage = 'No dimension specified.';    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );EndIf;# Validate DimensionSortOrder parameterspCompSortType = UPPER( TRIM( pCompSortType ) );pCompSortSense = UPPER( TRIM( pCompSortSense ) );pElSortType = UPPER( TRIM( pElSortType ) );pElSortSense = UPPER( TRIM( pElSortSense ) );IF( pCompSortType @<> 'BYINPUT' & pCompSortType @<> 'BYNAME' );  nErrors = 1;  sMessage = 'Invalid Value for pCompSortType: "' | pCompSortType | '". Must be "ByInput" or "ByName".';  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );ENDIF;IF( pCompSortSense @<> 'ASCENDING' & pCompSortSense @<> 'DESCENDING' );  nErrors = 1;  sMessage = 'Invalid Value for pCompSortSense: "' | pCompSortSense | '". Must be "Ascending" or "Descending".';  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );ENDIF;IF( pElSortType @<> 'BYINPUT' & pElSortType @<> 'BYNAME' & pElSortType @<> 'BYLEVEL' & pElSortType @<> 'BYHIERARCHY' );  nErrors = 1;  sMessage = 'Invalid Value for pElSortType: "' | pElSortType | '". Must be "ByInput" or "ByName" or "ByLevel" or "ByHierarchy".';  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );ENDIF;IF( pElSortSense @<> 'ASCENDING' & pElSortSense @<> 'DESCENDING' );  nErrors = 1;  sMessage = 'Invalid Value for pElSortSense: "' | pElSortSense | '". Must be "Ascending" or "Descending".';  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );ENDIF; # If blank delimiter specified then convert to defaultIf( pDelim @= '' );    pDelim = '&';EndIf; ### Check for errors before continuingIf( nErrors <> 0 );  If( pStrictErrorHandling = 1 );       ProcessQuit;   Else;      ProcessBreak;  EndIf;EndIf;# Loop through dimensions in pDimsDims = pDim;nDimDelimiterIndex = 1;sMdx = '';# Get 1st dimensionWhile( nDimDelimiterIndex <> 0 );    # Extract 1st dimension > sDim    nDimDelimiterIndex = Scan( pDelim, sDims );    If( nDimDelimiterIndex = 0 );        sDim = sDims;    Else;        sDim = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );        sDims = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );    EndIf;           # Create subset of dimensions using Wildcard to loop through dimensions in pDim with wildcard    sDimExp = '"'|sDim|'"';    sMdxPart = '{TM1FILTERBYPATTERN( EXCEPT( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , "*:*") ) ,'| sDimExp | ')}';    IF( sMdx @= '');       sMdx = sMdxPart;     ELSE;      sMdx = sMdx | ' + ' | sMdxPart;    ENDIF;End; If( SubsetExists( '}Dimensions' , cTempSubDim ) = 1 );    # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times    SubsetMDXSet( '}Dimensions' , cTempSubDim, sMDX );Else;    # temp subset, therefore no need to destroy in epilog    SubsetCreatebyMDX( cTempSubDim, sMDX, '}Dimensions' , 1 );EndIf; # Loop through dimensions in subset created based on wildcardnCountDim = SubsetGetSize( '}Dimensions' , cTempSubDim );While( nCountDim >= 1 );    sDim = SubsetGetElementName( '}Dimensions' , cTempSubDim, nCountDim );    # Validate dimension name    If( DimensionExists(sDim) = 0 );        nErrors = 1;        sMessage = Expand( 'Dimension %sDim% does not exist.' );        LogOutput( 'ERROR', Expand( cMsgErrorContent ) );    Else;        If( pLogOutput = 1 );          sMessage = Expand( 'Dimension %sDim% being processed....' );          LogOutput( 'INFO', Expand( cMsgInfoContent ) );        EndIf;          DimensionSortOrder( sDim, pCompSortType, pCompSortSense, pElSortType, pElSortSense );                 EndIf;         nCountDim = nCountDim - 1;End;#****Begin: Generated Statements***#****End: Generated Statements****#****Begin: Generated Statements***#****End: Generated Statements****#****Begin: Generated Statements***#****End: Generated Statements****################################################################################################# ##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~################################################################################################### ### Return code & final error message handlingIf( nErrors > 0 );    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';    nProcessReturnCode = 0;    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );    If( pStrictErrorHandling = 1 );         ProcessQuit;     EndIf;Else;    sProcessAction     = Expand( 'Process:%cThisProcName% sorted dimensions: "%pDim%" with the following values: pCompSortType=%pCompSortType%, pCompSortSense=%pCompSortSense%, pElSortType=%pElSortType%, pElSortSense=%pElSortSense%' );    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );    nProcessReturnCode = 1;    If( pLogoutput = 1 );        LogOutput('INFO', Expand( sProcessAction ) );       EndIf;EndIf;### End Epilog ###