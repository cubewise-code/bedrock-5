#Region CallThisProcess# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.If( 1 = 0 );    ExecuteProcess( '}bedrock.cube.rule.manage', 'pLogOutput', pLogOutput,      'pStrictErrorHandling', pStrictErrorHandling,    	'pCube', '', 'pMode', '',    	'pFileName', '', 'pDelim','&',     	'pPath', ''	);EndIf;#EndRegion CallThisProcess#****Begin: Generated Statements***#****End: Generated Statements****################################################################################################### ##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock-5 Ver 5.0~~## ################################################################################################### ##Global VariablesStringGlobalVariable('sProcessReturnCode');NumericGlobalVariable('nProcessReturnCode');nProcessReturnCode= 0;### Constants ###cThisProcName       = GetProcessName();cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));cTempSub            = cThisProcName | '_' | cTimeStamp | '_' | cRandomInt;cCubeDim            = '}Cubes';cCubeHier           = cCubeDim;sPath               = '';cUserName           = TM1User();cMsgErrorLevel      = 'ERROR';cMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';cLogInfo            = 'Process:%cThisProcName% run with parameters pCube:%pCube%, pMode:%pMode%, pFileName:%pFileName%, pDelim:%pDelim%, pPath:%pPath%.' ;  cDimCubes           = '}Cubes';### check operating systemIf( SubSt( GetProcessErrorFileDirectory, 2, 1 ) @= ':' );  sOS = 'Windows';  sOSDelim = '\';ElseIf( Scan( '/', GetProcessErrorFileDirectory ) > 0 );  sOS = 'Linux';  sOSDelim = '/';Else;  sOS = 'Windows';  sOSDelim = '\';EndIf;## LogOutput parametersIF( pLogoutput = 1 );    LogOutput('INFO', Expand( cLogInfo ) );   ENDIF;nErrors = 0;### PROCESS PROPERTIESDatasourceASCIIDelimiter = '';DatasourceASCIIQuoteCharacter = '';##Validate ModeIf(upper(pMode) @<> 'LOAD' & upper(pMode) @<> 'UNLOAD');    sMessage = Expand('Invalid Mode: %pMode%. Valid Modes are Load or Unload');    nErrors = nErrors + 1;    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );Endif;##Validate CubeIf( Trim(pCube) @= '' );    sMessage = Expand('No cube specified');    nErrors = nErrors + 1;    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );Endif;## Default filter delimitersIf( pDelim     @= '' );    pDelim     = '&';EndIf;# define backupdirIf(pPath @<> '');    If(Subst(pPath,long(pPath),1) @= sOSDelim );        sPath = pPath;    Else;        sPath = pPath | sOSDelim;    Endif;Else;  sPath = '.' | sOSDelim;Endif;## Default files names for storing rule and backupsIF(pFileName@='' % Scan( pDelim, pCube )<>0);  sRuleFileName         = '%sCube%.txt';  sBackupFileName       = '%sCube%.rux.bkp_%cTimeStamp%.txt';Else;  sRuleFileName         = pFileName;  sBackupFileName       = '%pFileName%.bkp_%cTimeStamp%.txt';Endif;    # Loop through list of CubessCubes = pCube;nCubeDelimIndex = 1;While( nCubeDelimIndex <> 0 );  nCubeDelimIndex = Scan( pDelim, sCubes );  If( nCubeDelimIndex = 0 );    sCube = sCubes;  Else;    sCube = Trim( SubSt( sCubes, 1, nCubeDelimIndex - 1 ) );    sCubes = Trim( Subst( sCubes, nCubeDelimIndex + Long(pDelim), Long( sCubes ) ) );  EndIf;  sMDX = Expand( '{TM1FILTERBYPATTERN(TM1SUBSETALL([}Cubes]), "%sCube%")}' );  sProc = '}bedrock.hier.sub.create.bymdx';  ExecuteProcess( sProc,    'pLogOutput', pLogOutput,    'pStrictErrorHandling', pStrictErrorHandling,    'pDim', cDimCubes,    'pHier', '',    'pSub', cTempSub,    'pMDXExpr', sMDX,    'pConvertToStatic', 1,    'pTemp', 1  );  nCube = 1;  nCubes = SubsetGetSize( cDimCubes, cTempSub );  While( nCube <= nCubes );    sCube = SubsetGetElementName( cDimCubes, cTempSub, nCube );    nCube = nCube + 1;        cCubeRuleFileName = '.' | sOSDelim | sCube | '.txt';    cStoreDirFile = sPath | Expand(sRuleFileName);      ##Unloading the Rule###      If(Upper(pMode) @= 'UNLOAD');        ##Before unloading, backup the existing rule (saved as .bkp.txt in data directory or with the suffix parameter)        ##and drop current rule        sRule=CubeRuleGet( sCube );        ASCIIOutput(cStoreDirFile, sRule);        ## Check if the saved rule file exists        If( sRule@<>'' );          CubeRuleDestroy( sCube );        Else;          sMessage = Expand('Copy of rule file (%cCubeRuleFileName%) has failed, rule was not unloaded.');          nErrors = nErrors + 1;          LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );          If( pStrictErrorHandling = 1 );               ProcessQuit;           Else;              ProcessBreak;          EndIf;        EndIf;      ##Loading the Rule###      ElseIf(Upper(pMode) @= 'LOAD');        ##Backup the existing rule (saved as .bkp.txt in given path or data directory)         ##and load the new rule file. New Rule file should available in the given path or in data directory        ## Check if the backup file exists        If( FileExists( cCubeRuleFileName ) <> 0 );          RuleLoadFromFile( sCube, cCubeRuleFileName);        Else;          nErrors = nErrors + 1;          sMessage = 'No Rule file found for cube: ' | sCube;          LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );          If( pStrictErrorHandling = 1 );               ProcessQuit;           Else;              ProcessBreak;          EndIf;        EndIf;    Endif;  End;End;### end Prolog ####****Begin: Generated Statements***#****End: Generated Statements****#****Begin: Generated Statements***#****End: Generated Statements****#****Begin: Generated Statements***#****End: Generated Statements****################################################################################################# ######################~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~################################################################################################### ### Return code & final error message handlingIf( nErrors > 0 );    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';    nProcessReturnCode = 0;    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );    If( pStrictErrorHandling = 1 );         ProcessQuit;     EndIf;Else;    sProcessAction = Expand( 'Process:%cThisProcName% successfully %pMode% cube rule from cube %pCube% .' );    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );    nProcessReturnCode = 1;    If( pLogoutput = 1 );        LogOutput('INFO', Expand( sProcessAction ) );       EndIf;EndIf;### End Epilog ###