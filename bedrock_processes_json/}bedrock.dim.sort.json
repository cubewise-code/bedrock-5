{
  "Name": "}bedrock.dim.sort",
  "PrologProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n  ExecuteProcess('}bedrock.dim.sort',\r\n    'pCompSortType', 'ByName',\r\n    'pCompSortSense', 'Ascending',\r\n    'pElSortType', 'ByHierarchy',\r\n    'pElSortSense', 'Descending',\r\n    'pLogOutput', 0,\r\n    'pStrictErrorHandling', 0,\r\n    'pDim', '',\r\n    'pDelim', '&');\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n \r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n \r\n################################################################################################# \r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock-5 Ver 5.0~~##\r\n################################################################################################# \r\n \r\n#Region @DOC\r\n# Description:\r\n# This process sets a dimension's sort order using the DimensionSortOrder function. pDimension\r\n# can use wildcards and/or a delimited list.\r\n \r\n# Note:\r\n# Valid dimension name (pDim) is mandatory.\r\n \r\n# Caution: \r\n# Existing DimensionSortOrder properties will be ignored and overwritten.\r\n#EndRegion @DOC\r\n \r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n \r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSubDim       = cThisProcName |'_dims_'| cTimeStamp |'_'| cRandomInt;\r\ncTempSubHier      = cThisProcName |'_hiers_'| cTimeStamp |'_'| cRandomInt;\r\ncUserName         = TM1User();\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncMsgInfoContent   = 'User:%cUserName% Process:%cThisProcName% Message:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters,\r\npCompSortType:%pCompSortType%,\r\npCompSortSense:%pCompSortSense%,\r\npElSortType:%pElSortType%,\r\npElSortSense:%pElSortSense%,\r\npLogOutput:%pLogOutput%,\r\npStrictErrorHandling:%pStrictErrorHandling%,\r\npDim:%pDim%,\r\npDelim:%pDelim%.'; \r\n \r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );   \r\nENDIF;\r\n \r\n### Validate Parameters ###\r\nnErrors = 0;\r\n \r\n# Validate dimension\r\nIf( Trim( pDim ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No dimension specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate DimensionSortOrder parameters\r\npCompSortType = UPPER( TRIM( pCompSortType ) );\r\npCompSortSense = UPPER( TRIM( pCompSortSense ) );\r\npElSortType = UPPER( TRIM( pElSortType ) );\r\npElSortSense = UPPER( TRIM( pElSortSense ) );\r\n\r\nIF( pCompSortType @<> 'BYINPUT' & pCompSortType @<> 'BYNAME' );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid Value for pCompSortType: \"' | pCompSortType | '\". Must be \"ByInput\" or \"ByName\".';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nENDIF;\r\n\r\nIF( pCompSortSense @<> 'ASCENDING' & pCompSortSense @<> 'DESCENDING' );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid Value for pCompSortSense: \"' | pCompSortSense | '\". Must be \"Ascending\" or \"Descending\".';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nENDIF;\r\n\r\nIF( pElSortType @<> 'BYINPUT' & pElSortType @<> 'BYNAME' & pElSortType @<> 'BYLEVEL' & pElSortType @<> 'BYHIERARCHY' );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid Value for pElSortType: \"' | pElSortType | '\". Must be \"ByInput\" or \"ByName\" or \"ByLevel\" or \"ByHierarchy\".';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nENDIF;\r\n\r\nIF( pElSortSense @<> 'ASCENDING' & pElSortSense @<> 'DESCENDING' );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid Value for pElSortSense: \"' | pElSortSense | '\". Must be \"Ascending\" or \"Descending\".';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nENDIF;\r\n \r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n    pDelim = '&';\r\nEndIf;\r\n \r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 ); \r\n      ProcessQuit; \r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n\r\n# Loop through dimensions in pDim\r\nsDims = pDim;\r\nnDimDelimiterIndex = 1;\r\nsMdx = '';\r\n# Get 1st dimension\r\nWhile( nDimDelimiterIndex <> 0 );\r\n    # Extract 1st dimension > sDim\r\n    nDimDelimiterIndex = Scan( pDelim, sDims );\r\n    If( nDimDelimiterIndex = 0 );\r\n        sDim = sDims;\r\n    Else;\r\n        sDim = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );\r\n        sDims = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );\r\n    EndIf;\r\n     \r\n      # Create subset of dimensions using Wildcard to loop through dimensions in pDim with wildcard\r\n    sDimExp = '\"'|sDim|'\"';\r\n    sMdxPart = '{TM1FILTERBYPATTERN( EXCEPT( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"*:*\") ) ,'| sDimExp | ')}';\r\n    IF( sMdx @= ''); \r\n      sMdx = sMdxPart; \r\n    ELSE;\r\n      sMdx = sMdx | ' + ' | sMdxPart;\r\n    ENDIF;\r\nEnd;\r\n \r\nIf( SubsetExists( '}Dimensions' , cTempSubDim ) = 1 );\r\n    # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times\r\n    SubsetMDXSet( '}Dimensions' , cTempSubDim, sMDX );\r\nElse;\r\n    # temp subset, therefore no need to destroy in epilog\r\n    SubsetCreatebyMDX( cTempSubDim, sMDX, '}Dimensions' , 1 );\r\nEndIf;\r\n \r\n# Loop through dimensions in subset created based on wildcard\r\nnCountDim = SubsetGetSize( '}Dimensions' , cTempSubDim );\r\nWhile( nCountDim >= 1 );\r\n    sDim = SubsetGetElementName( '}Dimensions' , cTempSubDim, nCountDim );\r\n    # Validate dimension name\r\n    If( DimensionExists(sDim) = 0 );\r\n        nErrors = 1;\r\n        sMessage = Expand( 'Dimension %sDim% does not exist.' );\r\n        LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n    Else;\r\n        If( pLogOutput = 1 );\r\n          sMessage = Expand( 'Dimension %sDim% being processed....' );\r\n          LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n        EndIf;\r\n    \r\n      DimensionSortOrder( sDim, pCompSortType, pCompSortSense, pElSortType, pElSortSense );\r\n             \r\n    EndIf;\r\n     \r\n    nCountDim = nCountDim - 1;\r\nEnd;",
  "MetadataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
  "DataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
  "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n################################################################################################# \r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock-5 Ver 5.0~~##\r\n################################################################################################# \r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 ); \r\n        ProcessQuit; \r\n    EndIf;\r\nElse;\r\n    sProcessAction     = Expand( 'Process:%cThisProcName% sorted dimensions: \"%pDim%\" with the following values: pCompSortType=%pCompSortType%, pCompSortSense=%pCompSortSense%, pElSortType=%pElSortType%, pElSortSense=%pElSortSense%' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );   \r\n    EndIf;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###",
  "HasSecurityAccess": false,
  "UIData": "",
  "DataSource": {
    "Type": "None"
  },
  "Parameters": [
    {
      "Name": "pCompSortType",
      "Prompt": "REQUIRED: sort type for components of consolidated elements \u200b",
      "Value": "ByName",
      "Type": "String"
    },
    {
      "Name": "pCompSortSense",
      "Prompt": "REQUIRED: the sense of order for CompSortType either \u2018Ascending\u2019 or \u2018Descending\u2019. This applies only when the CompSortType is ByName. \u200b",
      "Value": "Ascending",
      "Type": "String"
    },
    {
      "Name": "pElSortType",
      "Prompt": "REQUIRED: sort type for all elements\u200b",
      "Value": "ByHierarchy",
      "Type": "String"
    },
    {
      "Name": "pElSortSense",
      "Prompt": "REQUIRED: the sense of order for ElSortType either \u2018Ascending\u2019 or \u2018Descending\u2019. This applies only when the ElSortType is ByName.\u200b",
      "Value": "Descending",
      "Type": "String"
    },
    {
      "Name": "pLogOutput",
      "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
      "Value": 0,
      "Type": "Numeric"
    },
    {
      "Name": "pStrictErrorHandling",
      "Prompt": "OPTIONAL: On encountering any error, exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
      "Value": 0,
      "Type": "Numeric"
    },
    {
      "Name": "pDim",
      "Prompt": "REQUIRED: dimension name, accepts wildcards (if = *, then all the dimensions)",
      "Value": "",
      "Type": "String"
    },
    {
      "Name": "pDelim",
      "Prompt": "OPTIONAL: delimiter character for element list. (default value if blank = '&')",
      "Value": "&",
      "Type": "String"
    }
  ],
  "Variables": [],
  "VariablesUIData": []
}