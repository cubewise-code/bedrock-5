{
  "Name": "}bedrock.security.client.delete",
  "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n\tExecuteProcess( '}bedrock.security.client.delete', 'pLogOutput', pLogOutput,\r\n\t    'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pClient', '', 'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n################################################################################################# \r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock-5 Ver 5.0~~##\r\n################################################################################################# \r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will delete clients.\r\n\r\n# Use case: Intended for development and production.\r\n# 1/ Clean up users after go live.\r\n# 2/ Remove old employees from the system on termination.\r\n\r\n# Note:\r\n# Naturally, a valid client(s) (pClient) is mandatory otherwise the process will abort:\r\n# - Multiple clients can be specified separated by a delimiter. \r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName = GetProcessName();\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub = cThisProcName | '_' | cTimeStamp | '_' | cRandomInt;\r\ncTempFile = GetProcessErrorFileDirectory | cTempSub | '.csv';\r\ncClientDim = '}Clients';\r\ncClientHier = cClientDim;\r\ncUserName         = TM1User();\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgInfoLevel     = 'INFO';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pClient:%pClient%, pDelim:%pDelim%.' ; \r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );   \r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n  pDelim = '&';\r\nEndIf;\r\n\r\n# If no clients have been specified then terminate process\r\nIf( Trim( pClient ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No clients specified';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Check alias exists\r\nIf( DimensionExists('}ElementAttributes_'|cClientDim) = 0 % DimIx('}ElementAttributes_'|cClientDim, '}TM1_DefaultDisplayValue') = 0 );\r\n    AttrInsert( cClientDim, '', '}TM1_DefaultDisplayValue', 'A' );\r\nEndIf;\r\n\r\n### Split pClient into individual clients and delete ###\r\n#sClients            = pClient;\r\n#nDelimiterIndex     = 1;\r\n#While( nDelimiterIndex <> 0 );\r\n#  nDelimiterIndex = Scan( pDelim, sClients );\r\n#  If( nDelimiterIndex = 0 );\r\n#    sClient = sClients;\r\n#  Else;\r\n#    sClient = Trim( SubSt( sClients, 1, nDelimiterIndex - 1 ) );\r\n#    sClients = Trim( Subst( sClients, nDelimiterIndex + Long(pDelim), Long( sClients ) ) );\r\n#  EndIf;\r\n#  \r\n#  If( Scan( '*', sClient ) = 0);\r\n#    If( sClient @<> '' );\r\n#      If( DimIx( cClientDim, sClient ) <> 0 );\r\n#        sClient = DimensionElementPrincipalName(cClientDim,sClient);\r\n#        If( sClient @<> 'Admin' & sClient @<> TM1User() );\r\n#            DeleteClient(sClient);\r\n#        ElseIf( sClient @= 'Admin' );\r\n#            nErrors = 1;\r\n#            sMessage = 'Skipping attempt to delete Admin user.';\r\n#            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n#        ElseIf( sClient @= TM1User() );\r\n#            nErrors = 1;\r\n#            sMessage = 'Skipping attempt to delete self.';\r\n#            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n#        EndIf;\r\n#      Else;\r\n#        nErrors = 1;\r\n#        sMessage = 'Client: ' | sClient | ' does not exist.';\r\n#        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n#      Endif;\r\n#      If( nErrors > 0 );\r\n#          ItemReject( Expand( cMsgErrorContent ) );\r\n#      EndIf;\r\n#    Endif;  \r\n#  Else;\r\n#  # Wildcard search string\r\n#    iCount = 0;\r\n#    iCheck = 1;\r\n#    sChar = sClient;\r\n#    While (iCheck > 0);\r\n#      iCheck = Scan('*',sChar);\r\n#      If( iCheck > 0 );\r\n#        iCount = iCount + 1;\r\n#        sChar = Subst(sChar,iCheck+1,(long(sChar)-iCheck));\r\n#      Endif;\r\n#    End;\r\n#    If(iCount = 1);\r\n#      ##If the wilcardsearch is *String, below code will get executed\r\n#      if(Subst(sClient,iCount,1) @= '*');\r\n#        sClient1 = '\"'| Subst(sClient,iCount+1,(Long(sClient)- iCount))|'\"';\r\n#        sTempCount = NumbertoString(Long(sClient)-iCount);\r\n#        sMdx = '{FILTER({TM1SUBSETALL(['|cClientDim|'].['|cClientHier|'])},\r\n#                (Right( ['|cClientDim|'].['|cClientHier|'].[}TM1_DefaultDisplayValue],'| sTempCount|') ='|sClient1|'))}+\r\n#                {FILTER({TM1SUBSETALL(['|cClientDim|'].['|cClientHier|'])},\r\n#                (Right( ['|cClientDim|'].['|cClientHier|'].CurrentMember.Name,'| sTempCount|') ='|sClient1|'))}';\r\n#        If( SubsetExists( cClientDim, cTempSub ) = 1 );\r\n#            # If a delimited list of Client names includes wildcards then we may have to re-use the subset multiple times\r\n#            SubsetMDXSet( cClientDim, cTempSub, sMDX );\r\n#        Else;\r\n#            # temp subset, therefore no need to destroy in epilog\r\n#            SubsetCreatebyMDX( cTempSub, sMDX, cClientDim, 1 );\r\n#        EndIf;\r\n#        \r\n#        nHier_Sub_Size = HierarchySubsetGetSize(cClientDim, cClientHier, cTempSub);\r\n#        nCount = nHier_Sub_Size;\r\n#        While (nCount >= 1);\r\n#          sTemp = HierarchySubsetElementGetIndex(cClientDim, cClientHier, cTempSub, '', 1);\r\n#          sElement = HierarchySubsetGetElementName(cClientDim, cClientHier, cTempSub, nCount);\r\n#          If( sElement @<> 'Admin' & sElement @<> TM1User() );\r\n#              DeleteClient(sElement);\r\n#          ElseIf( sElement @= 'Admin' );\r\n#              LogOutput( 'WARN', 'Skipping attempt to delete Admin user.' );\r\n#          ElseIf( sElement @= TM1User() );\r\n#              LogOutput( 'WARN', 'Skipping attempt to delete self.' );\r\n#          EndIf;\r\n#          nCount = nCount -1;\r\n#        End;\r\n#        ##If the wilcardsearch is String*, below code will get executed\r\n#        ElseIf(Subst(sClient,Long(sClient),1) @= '*');\r\n#\r\n#        sClient1 = '\"'| Subst(sClient,iCount,(Long(sClient)- iCount))|'\"';\r\n#        sMdx = '{FILTER({TM1SUBSETALL(['|cClientDim|'].['|cClientHier|'])},\r\n#                (INSTR('| NumbertoString(iCount)|', ['|cClientDim|'].['|cClientHier|'].[}TM1_DefaultDisplayValue],'|sClient1|') ='| NumbertoString(iCount)|'))}+\r\n#                {FILTER({TM1SUBSETALL(['|cClientDim|'].['|cClientHier|'])},\r\n#                (INSTR('| NumbertoString(iCount)|', ['|cClientDim|'].['|cClientHier|'].CurrentMember.Name,'|sClient1|') ='| NumbertoString(iCount)|'))}';\r\n#        If( SubsetExists( cClientDim, cTempSub ) = 1 );\r\n#            # If a delimited list of Client names includes wildcards then we may have to re-use the subset multiple times\r\n#            SubsetMDXSet( cClientDim, cTempSub, sMDX );\r\n#        Else;\r\n#            # temp subset, therefore no need to destroy in epilog\r\n#            SubsetCreatebyMDX( cTempSub, sMDX, cClientDim, 1 );\r\n#        EndIf;\r\n#\r\n#        nHier_Sub_Size = HierarchySubsetGetSize(cClientDim, cClientHier, cTempSub);\r\n#        nCount = nHier_Sub_Size;\r\n#        While (nCount >= 1);\r\n#          sTemp = HierarchySubsetElementGetIndex (cClientDim, cClientHier, cTempSub, '', 1);\r\n#          sElement = HierarchySubsetGetElementName(cClientDim, cClientHier, cTempSub, nCount);\r\n#          If( sElement @<> 'Admin' & sElement @<> TM1User() );\r\n#              DeleteClient(sElement);\r\n#          ElseIf( sElement @= 'Admin' );\r\n#              LogOutput( 'WARN', 'Skipping attempt to delete Admin user.' );\r\n#          ElseIf( sElement @= TM1User() );\r\n#              LogOutput( 'WARN', 'Skipping attempt to delete self.' );\r\n#          EndIf;\r\n#          nCount = nCount -1;\r\n#        End;\r\n#      Endif;\r\n#    Else;\r\n#      ##If the wilcardsearch is *String*, below code will get executed\r\n#      sClient1 = '\"'| Subst(sClient,iCount,(Long(sClient)- iCount))|'\"';\r\n#      sMdx = '{FILTER({TM1SUBSETALL(['|cClientDim|'].['|cClientHier|'])},\r\n#              (INSTR(1,['|cClientDim|'].['|cClientHier|'].[}TM1_DefaultDisplayValue],'|sClient1|') <> 0))}+\r\n#              {FILTER({TM1SUBSETALL(['|cClientDim|'].['|cClientHier|'])},\r\n#              (INSTR(1,['|cClientDim|'].['|cClientHier|'].CurrentMember.Name,'|sClient1|') <> 0))}';\r\n#      If( SubsetExists( cClientDim, cTempSub ) = 1 );\r\n#            # If a delimited list of Client names includes wildcards then we may have to re-use the subset multiple times\r\n#            SubsetMDXSet( cClientDim, cTempSub, sMDX );\r\n#      Else;\r\n#            # temp subset, therefore no need to destroy in epilog\r\n#            SubsetCreatebyMDX( cTempSub, sMDX, cClientDim, 1 );\r\n#      EndIf;\r\n#\r\n#      nHier_Sub_Size = HierarchySubsetGetSize(cClientDim, cClientHier, cTempSub);\r\n#      nCount = nHier_Sub_Size;\r\n#      While (nCount >= 1);\r\n#        sTemp = HierarchySubsetElementGetIndex (cClientDim, cClientHier, cTempSub, '', 1);\r\n#        sElement = HierarchySubsetGetElementName(cClientDim, cClientHier, cTempSub, nCount);\r\n#          If( sElement @<> 'Admin' & sElement @<> TM1User() );\r\n#              DeleteClient(sElement);\r\n#          ElseIf( sElement @= 'Admin' );\r\n#              LogOutput( 'WARN', 'Skipping attempt to delete Admin user.' );\r\n#          ElseIf( sElement @= TM1User() );\r\n#              LogOutput( 'WARN', 'Skipping attempt to delete self.' );\r\n#          EndIf;\r\n#        nCount = nCount -1;\r\n#      End;\r\n#    Endif;\r\n#  EndIf;\r\n#End;\r\n\r\nsDim = cClientDim;\r\nsCurrHierName = cClientHier;\r\nsEles = pClient;\r\nnDelimiterIndexB = 1;\r\nWhile( nDelimiterIndexB <> 0 );\r\n    \r\n    nDelimiterIndexB = Scan( pDelim, sEles );\r\n    If( nDelimiterIndexB = 0 );\r\n        sEle = sEles;\r\n    Else;\r\n        sEle = Trim( SubSt( sEles, 1, nDelimiterIndexB - 1 ) );\r\n        sEles = Trim( Subst( sEles, nDelimiterIndexB + Long(pDelim), Long( sEles ) ) );\r\n    EndIf;\r\n    \r\n    # Check if a wildcard has been used to specify the Element name.\r\n    # If it hasn't then just delete the Element if it exists\r\n    If( Scan( '*', sEle ) = 0 & Scan( '?', sEle ) = 0);\r\n        If( HierarchyElementExists( sDim,sCurrHierName, sEle ) = 1 );\r\n            If( sEle @<> 'Admin' & sEle @<> TM1User() );\r\n              DeleteClient( sEle );\r\n            Else;\r\n              cMsgErrorContent = 'Attempt to %sEle%. Did not delete.';\r\n              LogOutput( 'WARN', Expand( cMsgErrorContent ) );\r\n            EndIF;\r\n            If( pLogOutput = 1 );\r\n                cMsgInfoContent = Expand( 'Attempted to delete Element %sEle%.' );\r\n                LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n            EndIf;\r\n        Else;\r\n            If( pLogOutput >= 1 );\r\n                cMsgInfoContent = Expand('The Hierarchy %sCurrHier% does not contain element %sEle%.');\r\n                LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n            EndIf;\r\n        Endif;\r\n    Else;\r\n        # Wildcard search string\r\n        sEle = '\"'|sEle|'\"';\r\n        sMdxEle = '{TM1FILTERBYPATTERN( {TM1SUBSETALL([ ' | sCurrHierName |' ])},'| sEle| ')}';\r\n\r\n        If( HierarchySubsetExists( sDim, sCurrHierName, cTempSub ) = 1 );\r\n            # If a delimited list of ele names includes wildcards then we may have to re-use the subset multiple times\r\n            HierarchySubsetMDXSet( sDim, sCurrHierName, cTempSub, sMDXEle );\r\n        Else;\r\n            # temp subset, therefore no need to destroy in epilog\r\n            SubsetCreatebyMDX( cTempSub, sMDXEle, sCurrHierName, 1 );\r\n        EndIf;\r\n\r\n        # Loop through subset of hierarchy elements created based on wildcard\r\n        nCountElems = HierarchySubsetGetSize(sDim, sCurrHierName, cTempSub);\r\n        While( nCountElems >= 1 );\r\n            sElement = HierarchySubsetGetElementName(sDim, sCurrHierName, cTempSub, nCountElems);\r\n            If( sElement @<> 'Admin' & sElement @<> TM1User() );\r\n              DeleteClient( sEle );\r\n            Else;\r\n              cMsgErrorContent = 'Attempt to %sElement%. Did not delete.';\r\n              LogOutput( 'WARN', Expand( cMsgErrorContent ) );\r\n            EndIF;\r\n            If( pLogOutput = 1 );\r\n                cMsgInfoContent = Expand( 'Attempted to delete Element %sElement%.' );\r\n                LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n            EndIf;\r\n            nCountElems = nCountElems - 1;\r\n        End;\r\n    EndIf;\r\n\r\nEnd;\r\n\r\nIf( nErrors = 0 );\r\n  DimensionSortOrder( cClientDim, 'ByName', 'Ascending', 'ByName' , 'Ascending' );\r\nEndIf;\r\n\r\n\r\n### End Prolog ###",
  "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
  "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
  "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n################################################################################################# \r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock-5 Ver 5.0~~##\r\n################################################################################################# \r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 ); \r\n        ProcessQuit; \r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully deleted Client %pClient% from dimension %cClientDim%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );   \r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
  "HasSecurityAccess": true,
  "UIData": "",
  "DataSource": {
    "Type": "None"
  },
  "Parameters": [
    {
      "Name": "pLogOutput",
      "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
      "Value": 0,
      "Type": "Numeric"
    },
    {
      "Name": "pStrictErrorHandling",
      "Prompt": "OPTIONAL: On encountering any error, exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
      "Value": 0,
      "Type": "Numeric"
    },
    {
      "Name": "pClient",
      "Prompt": "REQUIRED: Clients (Separated by delimiter (e.g. Client1&Client2), Accepts Wild card (e.g. *Client,*Client*, Client*))",
      "Value": "",
      "Type": "String"
    },
    {
      "Name": "pDelim",
      "Prompt": "OPTIONAL: Delimiter (default value if blank = '&')",
      "Value": "&",
      "Type": "String"
    }
  ],
  "Variables": [],
  "VariablesUIData": []
}